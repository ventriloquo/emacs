#+TITLE: Minha configuração do Emacs
#+AUTHOR: Tukain
#+STARTUP: overview
#+OPTIONS: toc:nil num:nil html-postamble:nil html-preamble:nil
#+HTML_HEAD_EXTRA:<style>
#+HTML_HEAD_EXTRA: html {
#+HTML_HEAD_EXTRA:  background: #0d1117;
#+HTML_HEAD_EXTRA:  color: #f0f6fc;
#+HTML_HEAD_EXTRA: }
#+HTML_HEAD_EXTRA: #content {
#+HTML_HEAD_EXTRA:   font-family: system-ui;
#+HTML_HEAD_EXTRA:   max-width: 80ch;
#+HTML_HEAD_EXTRA:   border: solid 1px #3d444db3;
#+HTML_HEAD_EXTRA:   padding: 32px;
#+HTML_HEAD_EXTRA:   border-radius: 6px;
#+HTML_HEAD_EXTRA: }
#+HTML_HEAD_EXTRA: pre.src::before { background: #0d1117 }
#+HTML_HEAD_EXTRA: pre.src {
#+HTML_HEAD_EXTRA:   background: #151b23;
#+HTML_HEAD_EXTRA:   border: none;
#+HTML_HEAD_EXTRA:   border-radius: 0;
#+HTML_HEAD_EXTRA:   margin: 0;
#+HTML_HEAD_EXTRA: }
#+HTML_HEAD_EXTRA: h1,h2,h3,h4,h6 {
#+HTML_HEAD_EXTRA:   padding: 0 0 9.6px;
#+HTML_HEAD_EXTRA:   border-bottom: solid 1px #3d444db3;
#+HTML_HEAD_EXTRA: }
#+HTML_HEAD_EXTRA: .title { text-align: left }
#+HTML_HEAD_EXTRA: a {
#+HTML_HEAD_EXTRA:   color: #4493F8;
#+HTML_HEAD_EXTRA:   text-underline-offset: .2rem;
#+HTML_HEAD_EXTRA: }
#+HTML_HEAD_EXTRA:</style>

O objetivo dessa configuração é ser um equivalente à minha
configuração do [[https://github.com/ventriloquo/nvim][Neovim]], desde teclas de atalhos a pacotes similares,
com a diferença sendo que aqui eu tento "documentar" /ao máximo/ +tudo+
o que está acontecendo.

Para que pelo menos eu consiga entender o que *CACETARALHOS* está
acontecendo aqui.

/OBS: Essa configuração é também pronta para exportação HTML./

* Bons padrões

O Emacs é um ótimo programa com padrões horrorosos,
então vamos dar um jeito nisso.

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.config/emacs/backups"))
      inhibit-startup-message t
      inhibit-startup-echo-area-message t
      tooltip-use-echo-area t
      custom-file "~/.config/emacs/custom.el")
(load custom-file)
(setq-default minor-mode-alist nil
	      fill-column 120)

(require 'ido)
(ido-mode t)
(ido-everywhere t)
(tooltip-mode -1)
(delete-selection-mode 1)

;; Não mostrar caixas de diálogos usando UI.
(setq use-dialog-box nil)

;; Refrescar todos os buffers quando os arquivos presentes
;; neles forem alterados externamente
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)

(setq warning-minimum-level
      :emergency)
#+end_src

* Org-mode

Coisinhas que melhoram a experiência de usar o Org-mode.

#+begin_src emacs-lisp
(require 'org-tempo)
(setq org-support-shift-select t
      org-edit-src-content-indentation 0)
(setq-default org-startup-indented t
              org-pretty-entities t
              org-use-sub-superscripts "{}"
              org-hide-emphasis-markers t
              org-startup-with-inline-images t
              org-image-actual-width '(300))
#+end_src

* Aparência

Configurações relacionadas a parte mais estética do Emacs,
apesar de ter algumas coisas que ajudam também na usabilidade.

#+begin_src emacs-lisp
(scroll-bar-mode 0)
(tool-bar-mode 0)
(menu-bar-mode 0)
(add-to-list 'default-frame-alist '(font . "jetbrainsmono-11"))
(global-prettify-symbols-mode)
(global-hl-line-mode t)
(icomplete-mode 1)
(setq-default whitespace-style
    '(face trailing space-mark tab-mark))
(set-frame-parameter nil 'alpha-background 100)
(add-to-list 'default-frame-alist '(alpha-background . 100))
;;(display-time-mode 1)
;;(display-battery-mode 1)
;;(global-whitespace-mode)
;;(global-display-fill-column-indicator-mode t)
#+end_src

* Pacotes
#+begin_src emacs-lisp
;; Configurando o MELPA
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Configurando o use-package
(require 'use-package)
(setq use-package-always-ensure t)

;; TODO: Remover essa linha quando o Emacs 30 virar mainstream.
(use-package which-key
  :config (which-key-mode))

;; Code completion
(use-package company
  :config
  (global-company-mode)
  (setq company-idle-delay 0))

;; Basicamente, pega código-fonte e exporta em HTML.
(use-package htmlize)

;; Um dos melhores clientes Git existentes (junto do Lazygit!)
(use-package magit)

;; Um servidor http simples :P
(use-package simple-httpd)

;; Painel lateral para navegação de arquivos.
(use-package neotree
  :config
  (setq neo-theme (if (display-graphic-p) 'ascii 'arrow)))

;; Mode-line
(use-package doom-modeline
  :config (doom-modeline-mode))

;; EVIL MODE!
(use-package evil
  :config
  (evil-set-leader 'normal (kbd "SPC"))
  (evil-mode))

;; Ícones
(use-package all-the-icons)
(use-package all-the-icons-ibuffer)
(use-package all-the-icons-dired)
(use-package all-the-icons-nerd-fonts)

(use-package visual-fill-column)

;; A tela inicial do Emacs
(use-package dashboard
  :config
  (setq dashboard-center-content t)
  (setq dashboard-vertically-center-content t)
  (dashboard-open))
#+end_src

Syntax-highlighting para a linguagem [[https://harelang.org][Hare]].

Esse pacote não está disponível ainda em nenhum package registry
conhecido, como o MELPA, então eu baixei diretamente do
[[https://git.sr.ht/~laumann/hare-mode][repositório original]] e carrego ela junto do meu setup.

#+begin_src emacs-lisp
(load-file "~/.config/emacs/etc/hare-mode.el")
#+end_src

** Temas
#+begin_src emacs-lisp
;; Ajustando alguns detalhes do tema "Modus", um dos temas pré
;; instalados no Emacs (um muito bonito inclusive).
(setq modus-themes-mode-line '(borderless accented 4 1.0))
(setq modus-themes-region '(bg-only))
(setq modus-themes-bold-constructs t
      modus-themes-italic-constructs t
      modus-themes-paren-match '(intense))
(setq modus-themes-headings
      '((1 . (rainbow background 1.5))
	(2 . (rainbow background 1.4))
	(3 . (rainbow background 1.3))
	(4 . (rainbow background 1.2))
	(t . (rainbow background 1.1))))
(setq modus-themes-org-blocks 'tinted-background)
;;(load-theme 'modus-vivendi t)

;; Temas externos
(use-package kanagawa-themes)
(use-package gruber-darker-theme)
(use-package doom-themes)

(load-theme 'doom-dracula t)
#+end_src

* Hooks
** prog-mode-hook
Esse hook serve basicamente para ativar a barra lateral
com os números das linhas, mas somente quando um arquivo
de código-fonte estiver sendo editado.

Assim, se você abrir um arquivo =.org= você não vai ter
uma linha de números ativada.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook
	  (lambda ()
	    (display-line-numbers-mode t)))
#+end_src

** visual-fill-column
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
	  (lambda ()
	    (visual-fill-column-mode)
	    (visual-fill-column-toggle-center-text)))
#+end_src
* Teclas de atalho

É claro que eu não iria deixar de adicionar *MAIS* teclas de
atalho para um programa que, entre outras coisas, é conhecido
por ter uma cacetada de teclas de atalho.

** Window/buffer controls
#+begin_src emacs-lisp
(evil-define-key 'normal 'global (kbd "<leader>s") 'save-buffer)
(evil-define-key 'normal 'global (kbd "<leader>c") 'kill-this-buffer)
(evil-define-key 'normal 'global (kbd "<tab>")     'next-buffer)
(evil-define-key 'normal 'global (kbd "<backtab>") 'previous-buffer)
(evil-define-key 'normal 'global (kbd "<leader>v") 'split-window-horizontally)
(evil-define-key 'normal 'global (kbd "<leader>V") 'split-window-vertically)
(evil-define-key 'normal 'global (kbd "<leader>q") 'delete-window)
(evil-define-key 'normal 'global (kbd "<leader>h") 'windmove-left)
(evil-define-key 'normal 'global (kbd "<leader>j") 'windmove-down)
(evil-define-key 'normal 'global (kbd "<leader>k") 'windmove-up)
(evil-define-key 'normal 'global (kbd "<leader>l") 'windmove-right)
#+end_src

** Find-file-at-point
#+begin_src emacs-lisp
(evil-define-key 'normal 'global (kbd "<leader>.") 'ffap)
#+end_src

** Duplicate-line
#+begin_src emacs-lisp
(global-set-key (kbd "C-;") 'duplicate-line)
#+end_src

** Eshell
#+begin_src emacs-lisp
(evil-define-key 'normal 'global (kbd "<leader>e") 'eshell)
#+end_src

** Whitespace-mode
#+begin_src emacs-lisp
(evil-define-key 'normal 'global (kbd "<leader>W") 'global-whitespace-mode)
#+end_src

** Número de linhas
#+begin_src emacs-lisp
(evil-define-key 'normal 'global (kbd "<leader>N") 'global-display-line-numbers-mode)
#+end_src

** Indicador de 80 caracteres

Tente ao máximo se limitar a usar 80 caracteres de largura em
*TUDO*.

/Ironicamente, essa linha de código ultrapassa esse limite :P/

#+begin_src emacs-lisp
(evil-define-key 'normal 'global (kbd "<leader>F") 'global-display-fill-column-indicator-mode)
#+end_src

** IBuffer

Lista "interativa" de buffers.

/É, eu também acho esse nome paia./

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(evil-define-key 'normal 'global (kbd "<leader>b") 'ibuffer)
#+end_src

** Compile

Essa tecla de atalho tem um certo "contexto" do porquê ser =<leader>m= no
lugar de =<leader>c= ("c" de compile). O contexto é bem simples:
Na minha configuração do Neovim eu tenho a mesma tecla de atalho, e ela
executa o =make=, o que eu usava para agilizar o processo de compilar as
[[https://github.com/ventriloquo/hare_raylib][minhas bindings da raylib]].

#+begin_src emacs-lisp
(evil-define-key 'normal 'global (kbd "<leader>m") 'compile)
#+end_src

** Modus-themes-toggle

Uma coisa muito legal que o tema Modus oferece é uma forma de
alterar entre a versão do tema claro e o tema escuro facilmente.

#+begin_src emacs-lisp
(global-set-key (kbd "C-<tab> m") 'modus-themes-toggle)
#+end_src

** Magit

Bom, isso aqui abre o Magit. Não tem muito o que explicar aqui.

#+begin_src emacs-lisp
(evil-define-key 'normal 'global (kbd "<leader>g") 'magit)
#+end_src

** Neotree

Painel lateral com uma árvore de arquivos (que nem o "nvim-tree" presente
na minha configuração do Neovim).

#+begin_src emacs-lisp
(evil-define-key 'normal 'global (kbd "<leader>n") 'neotree-toggle)
#+end_src

** Reiniciar o Emacs
#+begin_src emacs-lisp
(evil-define-key 'normal 'global (kbd "<leader>r") 'restart-emacs)
#+end_src
